I"ê(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  this.App.module("WeatherApp.Presenter", function(Presenter, App, Backbone, Marionette, $, _) {
    Presenter.raises = {
      weatherFetch: "entities:weather:fetch"
    };
    return Presenter.WeatherAppLayout = (function(superClass) {
      extend(WeatherAppLayout, superClass);

      function WeatherAppLayout() {
        return WeatherAppLayout.__super__.constructor.apply(this, arguments);
      }

      WeatherAppLayout.prototype.template = "#weather_layout";

      WeatherAppLayout.prototype.regions = {
        todayRegion: "#today-region",
        tomorrowRegion: "#tomorrow-region"
      };

      WeatherAppLayout.prototype.events = {
        "click #weather-toggle": "weatherToggleClicked"
      };

      WeatherAppLayout.prototype.initialize = function(options) {
        return options = options || {};
      };

      WeatherAppLayout.prototype.onShow = function() {
        debugger;
        var fetchingConditions, tomorrowTile;
        fetchingConditions = App.request(Presenter.raises.weatherFetch);
        $.when(fetchingConditions).done((function(_this) {
          return function(data) {
            var todayTile;
            todayTile = new App.TileApp.View.TileItemView({
              title: "Today",
              high: data.models[0].attributes.list[0].main.temp_max,
              low: data.models[0].attributes.list[0].main.temp_min,
              condition: data.models[0].attributes.list[0].weather.main
            });
            return _this.todayRegion.show(todayTile);
          };
        })(this)).fail((function(_this) {
          return function(data) {
            debugger;
          };
        })(this));
        tomorrowTile = new App.TileApp.View.TileItemView({
          title: "Tomorrow",
          high: 80,
          low: 70
        });
        return this.tomorrowRegion.show(tomorrowTile);
      };

      return WeatherAppLayout;

    })(Marionette.LayoutView);
  });

}).call(this);
:ET